[{"name": "app.py", "content": "# Additional Python Notes\n# ------------------------\n\n# Capitalization matters in Python. Python is case-sensitive: min and Min are different.\n# Spelling matters in Python. You must match the spelling of functions and variables exactly.\n# Indentation matters in Python. Indentation is used to define code blocks and must be consistent.\n\n# Functions\n# ---------\n# Functions are used to group code together and make it more readable and reusable.\n# We define custom functions that can be called later in the code.\n# Functions are blocks of logic that can take inputs, perform work, and return outputs.\n\n# Defining Functions\n# ------------------\n# Define a function using the def keyword, followed by the function name, parentheses, and a colon. \n# The function name should describe what the function does.\n# In the parentheses, specify the inputs needed as arguments the function takes.\n\n# For example:\n#    The function filtered_data() takes no arguments.\n#    The function between(min, max) takes two arguments, a minimum and maximum value.\n#    Arguments can be positional or keyword arguments, labeled with a parameter name.\n\n# The function body is indented (consistently!) after the colon. \n# Use the return keyword to return a value from a function.\n\n# Calling Functions\n# -----------------\n# Call a function by using its name followed by parentheses and any required arguments.\n    \n# Decorators\n# ----------\n# Use the @ symbol to decorate a function with a decorator.\n# Decorators a concise way of calling a function on a function.\n# We don't typically write decorators, but we often use them.\n\nimport plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny.express import input, ui, render\nfrom shinywidgets import render_widget, render_plotly\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom shiny import reactive\n\npenguins = load_penguins()\n\n# Set the page options with the title \"Karto's Penguins Data\" and make it fillable\nui.page_opts(title=\"Karto's Penguins Data\", fillable=True)\n\n# Add a Shiny UI sidebar for user interaction\nwith ui.sidebar(\n    position=\"right\", bg=\"#f8f8f8\", open=\"open\"\n):  # Set sidebar open by default\n    ui.h2(\"Sidebar\")  # Add a second-level header titled \"Sidebar\"\n\n    # Create a dropdown input for choosing a column\n    ui.input_selectize(\n        \"selected_attribute\",\n        \"Select column to visualize\",\n        choices=[\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n        selected=\"bill_length_mm\",\n    )\n\n    # Create a numeric input for Plotly histogram bins\n    ui.input_numeric(\"plotly_bin_count\", \"Plotly bin numeric\", 1, min=1, max=10)\n\n    # Create a slider input for Seaborn bins\n    ui.input_slider(\n        \"seaborn_bin_count\", \"Seaborn bin count\", 10, 100, 20, step=5, animate=True\n    )\n\n    # Create a checkbox group to filter species\n    ui.input_checkbox_group(\n        \"selected_species_list\",\n        \"Select a species\",\n        choices=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=[\"Adelie\"],\n        inline=True,\n    )\n\n    # Add a horizontal rule in the sidebar\n    ui.hr()\n\n    # Add a hyperlink to the sidebar for GitHub repository\n    ui.h5(\"GitHub Code Repository\")\n    ui.a(\n        \"cintel-02-data-karto\",\n        href=\"https://github.com/wkarto/cintel-02-data\",\n        target=\"_blank\",\n    )\n\n# Main content layout\nwith ui.layout_columns():\n    # Display the Plotly Histogram\n    with ui.card():\n        ui.card_header(\"Plotly Histogram\")\n\n        @render_plotly\n        def plotly_histogram():\n            return px.histogram(\n                filtered_data(),\n                x=input.selected_attribute(),\n                nbins=input.plotly_bin_count(),\n                color=\"species\",\n            )\n\n    # Display Data Table (showing all data)\n    with ui.card():\n        ui.card_header(\"Data Table\")\n\n        @render.data_frame\n        def data_table():\n            return render.DataTable(filtered_data())\n\n    # Display Data Grid (showing all data)\n    with ui.card():\n        ui.card_header(\"Data Grid\")\n\n        @render.data_frame\n        def data_grid():\n            return render.DataGrid(filtered_data())\n\n\n# Display the Scatterplot and Seaborn Histogram\nwith ui.layout_columns():\n    # Plotly Scatterplot (showing all species)\n    with ui.card():\n        ui.card_header(\"Plotly Scatterplot: Species\")\n\n        @render_plotly\n        def plotly_scatterplot():\n            return px.scatter(\n                data_frame=filtered_data(),\n                x=\"body_mass_g\",\n                y=\"bill_depth_mm\",\n                color=\"species\",\n                labels={\n                    \"bill_depth_mm\": \"Bill Depth (mm)\",\n                    \"body_mass_g\": \"Body Mass (g)\",\n                },\n            )\n\n    # Seaborn Histogram (showing all species)\n    with ui.card():\n        ui.card_header(\"Seaborn Histogram: All Species\")\n\n        @render.plot\n        def seaborn_histogram():\n            hist = sns.histplot(\n                data=filtered_data(), x=\"body_mass_g\", bins=input.seaborn_bin_count()\n            )\n            hist.set_xlabel(\"Mass (g)\")\n            hist.set_ylabel(\"Count\")\n            return hist\n            \n    # Summary Statistics Table\n    with ui.card():\n        ui.card_header(\"Summary Statistics\")\n        \n        @render.data_frame\n        def summary_table():\n            summary = penguins.describe()\n            return summary.reset_index()  # Reset index for display\n\n@reactive.calc\ndef filtered_data():\n    # Filter the penguins DataFrame by the species selected by the user\n    selected_species = input.selected_species_list()\n    filtered_df = penguins[penguins[\"species\"].isin(selected_species)]\n    return filtered_df\n", "type": "text"}]